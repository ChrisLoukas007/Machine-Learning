# N is the number of users we will test showing an ad to.
# there are 10,000 total rows, each representing a user so this number could be anywhere from 1 to 10,0000
N = 5000
 
# d is the number of ads we are trying to decide between
# there are 10 columns, each representing a different ad so we set it equal to 10 because we want to see which of the 10 is the best
d = 10
 
# This list will contain of all the ads we chose. The length of this list will be the same as N. (5,000 in this case)
# NOTE: This does not represent a *CLICKED* ad. It is only is saying that we selected this ad to be shown to a user. 
# The user may or may not click any of these ads we've selected to show them
ads_selected = []
 
# This list contains a value for each ad representing how many times we've selected them.
# Note: Again, this is NOT representing clicks. It just is tracking how many times we've chosen to show each ad to a user.
number_of_selections = [0]*d
 
# This list contains the number of times each ad has been clicked.
# So we've selected an ad to be shown to user n, and they've clicked that ad. This list will be used for tracking how many times that happens
sum_of_rewards = [0]*d
 
# Total count of how many times users have clicked any ad we've shown them. This will be the same as sum(sum_of_rewards).
total_reward = 0 
 
#n represents each user we will be showing an ad to.
for n in range(0,N):
  # the ad variable will be used to track which ad we're showing
  ad = 0 
  # max_upper_bound is our way of tracking which of the 10 ads currently has the highest upper bound
  max_upper_bound = 0 
 
  # in this for loop, we'll be looping through each of our 10 ads so that we can choose 1 of those 10 to show to our user 'n'
  # the goal of this for loop is to find which ad has the highest upper bound
  for i in range(0,d):
    #if the ad has been shown to a user at least once:
    if number_of_selections[i] >0:
      # average_reward is the (number of times ad is clicked) / (number of times ad is shown)
      average_reward = sum_of_rewards[i] / number_of_selections[i]
      # delta_i is calculated from the formula we were shown in the video. It represents our confidence interval.
      # n+1 is the total number of ads shown so far. number_of_selections[i] is the total number of times ad i has been shown
      delta_i = math.sqrt(3/2*math.log(n+1)/number_of_selections[i])
      # this is the upper confidence bound. It takes our average click rate of the ad (which is average_reward) and ads our confidence interval.
      # this is kind of like an uncertainty. We think the average click rate is average reward, but it *might* be as big as average_reward + delta_i
      upper_bound = average_reward + delta_i
    else:
      # in this 'else' case the ad has not been shown to a user yet, so we just set its upper bound to a huge number
      # this will insure that we test showing each ad as quickly as possible
      upper_bound = 1e400
 
    # as loop through our 10 ads, we use this max_upper_bound to track which of our 10 ads has the highest upper_bound
    if (upper_bound>max_upper_bound):
      max_upper_bound = upper_bound # if upper_bound > max_upper_bound, then we need to assign this upper_bound to be the new max upper_bound
      ad=i # we need to track which ad has the max upper_bound, so we track it with the variable "ad"
    
    # after this for loop has cycled through our 10 ads, whatever ad had the highest upper_bound will be assigned to ad = i
    # so if our first ad had the highest upper bound, ad = 0
 
    # THIS IS OUR CHOSEN AD WE'RE GOING TO SHOW TO USER n
 
  
  # we add our chosen ad to our list tracking all the ads we've chosen
  ads_selected.append(ad) 
  # we add 1 to our list which is tracking the total count for each ad
  number_of_selections[ad] += 1
  # now is the moment of the truth. This is where we peak into our dataset to answer the question:
  # WILL USER n CLICK ON THE AD WE CHOSE TO SHOW THEM??
  # we check if row n (user number) of column ad (our ad number) is 1 or 0
  # 1 means the user clicked our ads, 0 means they didn't click it
  reward = dataset.values[n,ad] 
  # then we add this reward to our list which is tracking the total click count for each ad
  sum_of_rewards[ad] += reward
  # then we add this reward to the int which is tracking our total click count for all ads combined
  total_reward += reward
